// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

// Libraries
import "forge-std/Test.sol";
import "forge-std/console.sol";

// Test Contracts
import {Invariants} from "./Invariants.t.sol";
import {Setup, VaultSimpleBorrowable} from "./Setup.t.sol";

/// @title CryticToFoundry
/// @notice Foundry wrapper for fuzzer failed call sequences
/// @dev Regression testing for failed call sequences
contract CryticToFoundry is Invariants, Setup {
    modifier setup() override {
        _;
    }

    /// @dev Foundry compatibility faster setup debugging
    function setUp() public {
        // Deploy protocol contracts and protocol actors
        _setUp();

        // Deploy actors
        _setUpActors();

        // Initialize handler contracts
        _setUpHandlers();

        actor = actors[USER1];
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //                                 BROKEN INVARIANTS REPLAY                                  //
    ///////////////////////////////////////////////////////////////////////////////////////////////

/*     function test_VaultSimple_invariantB() public {
        this.deposit(
            83493487105448349552669253855301941049201354195828398746414,
            address(0),
            2277089002188209864752689643644602506849799188903790638631838
        );
        this.mint(1, address(0), 24353370084716150411497391721227231237593101500565436593191812741441);
        this.enableController(0, 12353083280266159014051816115657711239240700745);
        this.borrowTo(
            1,
            3527538705597390463738128823127339782498507807664901862911545262,
            30032778325258107036352494001836750199060350958018865003326920081796
        );
        this.setInterestRate(1);
        this.depositToActor(
            1,
            50198656277309713409332244950283809083499187584386359541636444056111,
            15670429295396922226133683431028604831585463702489225899766814856025325
        );
        vm.warp(block.timestamp + 10000);

        this.deposit(2, address(0), 746683043721267046779604852567904493083922684942640003632907360);

        echidna_invariant_VaultSimple_invariantABCD();
    }

    function test_VaultSimpleBorrowable_broken_invariantAB() public {
        vm.warp(74);
        actor = actors[USER2];
        this.deposit(
            93292454204102320436648930461024037122239862751907655843385597354195001844143,
            0xE29Aec06B2d048e8EA21095415cb5693C45A4f01,
            95780971304118053647396689196894323976171194979276877
        );

        this.mintToActor(
            48,
            87844020543456809816276025214892046021177926846546376072335942354177636567197,
            115495452021143981003309240681509225355653116371312211774302539419510820032838
        );

        vm.warp(94);
        actor = actors[USER3];
        this.enableController(
            64247237340449846511804413695475773234115604658463724102052960541695604865848,
            81161323894684193952844852901009357251867683222163124977753888019533956688366
        );

        vm.warp(58964);
        this.borrowTo(7, 300000000000000000000000000000, 11680);

        vm.warp(105107);
        actor = actors[USER2];
        this.setInterestRate(196608);

        vm.warp(139021);
        this.repayTo(4, 53923744698206882920308407843052100929118775941809544524014124937407221950214, 7);

        vm.warp(152324);
        this.assert_ERC4626_roundtrip_invariantA(3, 19);

        vm.warp(152524);
        actor = actors[USER3];
        this.redeem(
            82321244362898406004237781923382072462235651117855347063128348026547422915063,
            0,
            0xA647ff3c36cFab592509E13860ab8c4F28781a66
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();
    }

    function test_VaultSimpleBorrowable_broken2_invariantAB() public {
        _setUpBlockAndActor(15414, USER1);
        this.deposit(
            1050000000000000000,
            0xbFbfc6a023C7E6442850E51fd2Ef95b74fBBF6f4,
            50056591937129702866172700757417936275481751556309114581921989481229494072685
        );

        _setUpBlockAndActor(15414, USER1);
        this.setInterestRate(88);

        _setUpBlockAndActor(45273, USER3);
        this.enableController(108625544386678735225858684630049397735743002180634093873999478415703162244086, 159);

        _setUpBlockAndActor(45648, USER3);
        this.borrowTo(
            112,
            103399230860284986570016836398760076070658451595311608713646046885630128186661,
            115792089237316195423570985008196446929927800447604857151448833963935374526881
        );

        _setUpBlockAndActor(76591, USER3);
        this.mint(
            115792089237316195423570985008687907853269984665640564039457584007913129639688,
            0x4e59b44847b379578588920cA78FbF26c0B4956C,
            115792089237316195423570985008687907853269984665640564039457584007913129639704
        );

        _setUpBlockAndActor(106831, USER1);
        this.deposit(
            31536088,
            0x391e5Dc7799Aa1E8758CE1700e40C73efefe8c41,
            51786712791901310870594756932122677743360462015290283621742065965238361064669
        );

        _setUpBlockAndActor(155846, USER3);
        this.disableCollateral(
            32220021555707170768584030699185698262736873175132847617807613853112393377309,
            55819861866768326092802605806234486825607256418538461438421219871777557769789
        );

        _setUpBlockAndActor(189891, USER1);

        _setUpBlockAndActor(213633, USER1);
        this.borrowTo(
            4937055118740282326130742133518971481113926288934338992857321759835015568137,
            75257621328158587392298270386332921435697482778552542990467193070716649064954,
            7
        );

        _setUpBlockAndActor(272781, USER2);

        _setUpBlockAndActor(280025, USER3);
        this.echidna_invariant_ERC4626_depositMintWithdrawRedeem_invariantA();

        _setUpBlockAndActor(313096, USER2);
        this.transferFromTo(
            115792089237316195423570985008687907853269984665640564039457584007913129639736,
            67603374289203028177518852574732449174340673859433545291209897156528982962267,
            3101000729240708009187251112301202222791343326492150108612738121379767967366
        );

        _setUpBlockAndActor(351190, USER1);
        this.mint(
            115792089237316195423570985008687907853269984665640564039457584007913129639520,
            0x00000000000000000000000000000000000000C0,
            89533572641196918554973006617941583554242098664904413708501613422884176312236
        );

        _setUpBlockAndActor(396031, USER1);
        this.assert_ERC4626_roundtrip_invariantE(
            115792089237316195423570985008687907853269984665640564039457584007913129574145, 31536000
        );

        _setUpBlockAndActor(439053, USER2);
        this.depositToActor(
            55321967524374208153831286240750404906819356501037520044483783676396467501698,
            96970996544270474534578468795209521593095711786171074964526048526805466424251,
            115792089237316195423570985008687907853269984665640564039457584007913129639920
        );

        _setUpBlockAndActor(450668, USER1);

        _setUpBlockAndActor(474478, USER3);
        this.withdraw(
            115792089237316195423570985008687907853269984665640564039457584007913129639571,
            20671408955595464485137310811010750722065004886169655379890537649634677148047,
            0x6370163583016BF2E71E3E26b1382422CecA1B9e
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();

        _setUpBlockAndActor(493814, USER2);
        this.reorderCollaterals(
            1000000000000000131072,
            115792089237316195423570985008687907853269984665640564039457584007913127639680,
            114,
            250
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();

        _setUpBlockAndActor(501603, USER3);
        this.transferTo(
            115792089237316195423570985008687907853269984665640564039457584007913129639902,
            86895102588101535888800132252461206879806254156085816027395372582073938335790,
            115792089237316195423570985008687907853269984665640564039457584007913129639927
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();
    }

    function test_VaultSimpleBorrowable_invariantAB_VaultRegularBorrowable() public {
        this.enableController(
            10891417463186321878817595037245227056520165078861879054651333585778245431584,
            21930686406968188979724827866868968205279826478968719624753350604104008044968
        );
        this.deposit(
            83557581994165477599943663878872524943957097861786429630040996371523371162598,
            0x3f85D0b6119B38b7E6B119F7550290fec4BE0e3c,
            107580552309267478042884217085615889728360597564338841991576299421520307159542
        );
        this.depositToActor(
            49196,
            89935081237975188495890987475330997229803137673297315798314765865672592996856,
            65196615278909924202871229888198140670750867663260376589785399841224717076244
        );
        this.borrowTo(
            7,
            115792089237316195423570985008687907853269984665640564039457584007913129639931,
            94192241537271929348049048806938014768712534167570048410948761230357606629882
        );
        this.setInterestRate(19919);
        this.assert_ERC4626_roundtrip_invariantF(
            26521830669583205673655044850813169290229229399281005188358791134451038685810, 121080763
        );
        vm.warp(block.timestamp + 322347);
        this.pullDebt(
            20974109179781022694856996155579966553037316100274196689100404481856340237,
            729050272432828427542393488297420320872845522397111425710614063699175605251,
            8840199382535595566500389712088250080562322459838482236938995414452384204546
        );
        vm.warp(block.timestamp + 275220);
        this.setSupplyCap(
            6128151879825845338039704386367834507841687414589724205392607306517255,
            61972906204523136127940533041326310050341371199428115569979863685256716
        );
        vm.warp(block.timestamp + 248522);

        echidna_invariant_VaultSimpleBorrowable_invariantAB();

        this.depositToActor(
            21470,
            88164953528872590577300432096146057452872826730137212639223097239813576900036,
            74554297520537649559278052839029037551829287812476688671603715152091027185509
        );
        vm.warp(block.timestamp + 29262200);
        vm.warp(block.timestamp + 289047);
        this.depositToActor(
            21470,
            88164953528872590577300432096146057452872826730137212639223097239813576900036,
            74554297520537649559278052839029037551829287812476688671603715152091027185509
        );
        //this.reorderCollaterals(10897769, 0, 0, 0);
        vm.warp(block.timestamp + 95589);
        //this.disableController(27746492999019728439765093678830710046387075060678790270975442297204693943);

        echidna_invariant_VaultSimpleBorrowable_invariantAB();
    }

    function test_roudingFix2() public {
        _setUpBlockAndActor(block.number + 37350, USER1);
        this.setInterestRate(2673624617);

        _setUpBlockAndActor(block.number + 37350, USER1);
        this.enableController(
            974705300023655143460649552783719145488647020390451951774924669773,
            34889246559171040279680797389783392145037077580391580952356955697457
        );

        this.deposit(1, address(0), 220605381302003440560708727348400281633135326589260067928327855791);

        this.borrowTo(1, 473635198873, 262095261126819711899063844952972822840422218072067871521661);

        _setUpBlockAndActor(block.number + 4863, USER1);
        this.setAccountOperator(
            51, 30434352608857084685054669267088412332728388982313063270844720824187415065519, false
        );

        _setUpBlockAndActor(block.number + 1404, USER1);
        this.assert_ERC4626_roundtrip_invariantA(
            65799450299376707323338948449025236695300512193404263401708997460711039827966, 5
        );

        _setUpBlockAndActor(block.number + 1320, USER1);
        this.transferTo(
            8960251488519949584943349342676242197907823536321762306439177470893091129833,
            29275607152695154577629778440270762108447764852561017502720869001617095103299,
            13830
        );

        _setUpBlockAndActor(block.number + 4955, USER1);
        this.setSupplyCap(
            3402907875176710683879492596309679480880468689702959257630441803472653551867,
            91989361991455497363413095452359672143475027571477426177411007498981541174454
        );

        _setUpBlockAndActor(block.number + 1963, USER1);
        this.assert_ERC4626_roundtrip_invariantD(
            112722202323136561393525325182086252757421649780318125509259905201002030044055, 86401
        );

        _setUpBlockAndActor(block.number + 9 + 53678, USER1);
        this.pullDebt(
            46926207934478795292271095332981566615810737506271995344122651492017207185121,
            115792089237316195423570985008687907853269984665640564039457584007913129639812,
            41564608065038052118924323189996551827377578224030497509910983649744599558470
        );

        _setUpBlockAndActor(block.number + 4957 + 12155 + 20, USER1);
        this.repayTo(
            24010309994245337217767231159130513631044693296372268907407548365748763919513,
            41640768952628744582047398191588965358746061157833243991572796731729635380327,
            4013301448
        );

        _setUpBlockAndActor(block.number + 4994, USER1);
        this.assert_ERC4626_roundtrip_invariantB(
            8591199908633007552025371622239154879542113097048527873023001595589534744245, 312
        );

        _setUpBlockAndActor(block.number + 28126 + 40809, USER1);
        this.mintToActor(
            1524785991, 94770901425382707645982434801208986081893116647861686451217818710293849056692, 2495578189
        );

        _setUpBlockAndActor(block.number + 1322 + 30304, USER1);
        this.disableController(109590050855132395193547060399598738730679977601774708619272268965138753376521);

        _setUpBlockAndActor(block.number + 1362, USER1);
        this.assert_ERC4626_roundtrip_invariantD(
            3102442652642231382127076256943147157695138054581104547590449676489188020172, 540897831
        );

        _setUpBlockAndActor(block.number + 30042, USER1);
        this.setBorrowCap(115792089237316195423570985008687907853269984665640564039457584007912972441676, 255);

        _setUpBlockAndActor(block.number + 967, USER1);
        this.assert_ERC4626_roundtrip_invariantA(
            33356899129821815970778104081402036888062049267702776824083264833762268447412,
            28557190890115485444325240282485014970052958918523069272707086587162403874256
        );

        _setUpBlockAndActor(block.number + 2512, USER1);
        this.disableCollateral(
            16156842317565293874272834530371880720966471053262404558597773956279093428223,
            100493319074610262040629111243543395895843514107432533086161102923386496457182
        );

        _setUpBlockAndActor(block.number + 41598, USER1);
        this.mint(
            46770447827580554747587026655870071609628978727156205,
            address(0x1fffffffe),
            68022912246876231712114681105074816469712937980606894640033681072982160563276
        );

        _setUpBlockAndActor(block.number + 14735, USER1);
        this.transferFrom(
            977020907293985692412636172214525632789895995827472659445650,
            0,
            address(0xdeadbeef),
            20017260443575432544396792571181719361916266269906175455897478327045921514395
        );

        _setUpBlockAndActor(block.number + 4960, USER1);
        this.approveTo(
            0,
            115754477555338170954245134728382081014515253725470521188593404063622758786140,
            115792089237316195423570985008687907853269984665635564039457584007913129639935
        );

        _setUpBlockAndActor(block.number + 1321, USER1);
        this.approveTo(
            36,
            99635246919750901549298150478316027132303513612378159480859810051634036211712,
            32550744143136045529702861637878048568153605992259719136
        );

        _setUpBlockAndActor(block.number + 126, USER1);
        this.transferTo(413792, 0, 15529932101878100335745995777163542365671092845182061356594225049570360617116);

        _setUpBlockAndActor(block.number + 160, USER1);
        this.disableControllerEVC(20884043087835592912171152197139391427992117930768665219795490849248880858579);

        echidna_invariant_VaultSimpleBorrowable_invariantAB();
    }

    function test_roundingFix() public {
        VaultSimpleBorrowable vault = VaultSimpleBorrowable(address(vaultRegularBorrowable));

        _setUpTimestampAndActor(block.timestamp + 389488, USER1);
        this.setInterestRate(260388328);
        this.enableController(
            974705300023655143460649552783719145488647020390451951774924669773,
            34889246559171040279680797389783392145037077580391580952356955697457
        );

        this.deposit(1, address(0), 220605381302003440560708727348400281633135326589260067928327855791);
        this.borrowTo(1, 473635198873, 262095261126819711899063844952972822840422218072067871521661);

        _setUpTimestampAndActor(block.timestamp + 592111, USER1);
        this.setAccountOperator(
            27, 75256891512924542210405387466462267520421098117241549512760825530570359614130, false
        );

        _setUpTimestampAndActor(block.timestamp + 419861, USER2);
        this.assert_ERC4626_roundtrip_invariantA(
            115792089237316195423570985008687907853269984665640564039457584007909567631783, 11
        );

        _setUpTimestampAndActor(block.timestamp + 405856, USER1);
        this.transferTo(
            115792089237316195423570985008687907853269984665640564039457584007913129639932,
            76450787359836037641860180984291677749980919077056822294353438043884394381312,
            86399
        );

        _setUpTimestampAndActor(block.timestamp, USER2);
        this.assert_ERC4626_roundtrip_invariantD(
            112722202323136561393525325182086252757421649780318125509259905201002030044055, 86401
        );

        _setUpTimestampAndActor(block.timestamp + 322310, USER1);
        this.depositToActor(
            30801455118388354985489167069655619358074621728553375131727290562972475801734,
            31222198430446618515890072030168329717621179102177167,
            17358719832304557345062271652453693257416628727317314939806503511715905065400
        );

        _setUpTimestampAndActor(block.timestamp + 332369, USER1);
        this.disableCollateral(
            59944016244377421561993078273766566327839745292197934465282207972123457829260,
            8880262287579196378029262876999703543940517390671845084346853443895751002117
        );

        _setUpTimestampAndActor(block.timestamp + 322307, USER1);
        this.assert_ERC4626_roundtrip_invariantE(
            71356314893123551091944761899311546987794118357729888246202958509589302038637,
            9326360656094746519392628367200455867275768365361418461564853084786320017858
        );

        _setUpTimestampAndActor(block.timestamp + 583581, USER1);
        this.disableController(115792089237316195423570985008687907853269984665640564039457584007910231963626);

        _setUpTimestampAndActor(block.timestamp + 554889, USER1);
        this.pullDebt(
            46926207934478795292271095332981566615810737506271995344122651492017207185121,
            115792089237316195423570985008687907853269984665640564039457584007913129639812,
            41564608065038052118924323189996551827377578224030497509910983649744599558470
        );

        _setUpTimestampAndActor(block.timestamp + 276464, USER1);
        this.setAccountOperator(
            115792089237316195423570985008687907853269984665640564039457584007913129639713,
            36378991325885162174397283495306774927410675805417650463773818618331982136940,
            true
        );

        _setUpTimestampAndActor(block.timestamp + 389489, USER2);
        this.pullDebt(
            62181819423937839877406419391829465972856742985055010332424472791996772680512,
            115792089237316195423570985008687907853269984665640564039457584007913129639934,
            115792089237316195423570985008687907853269984665640564039457584007913129639932
        );

        _setUpTimestampAndActor(block.timestamp + 276465, USER1);
        //this.enableController(5, 1461501637330902918203684832716283019655932542975);

        _setUpTimestampAndActor(block.timestamp + 361136, USER1);
        this.repayTo(
            115792089237316195423570985008687907853269984665640564039457584007911448862145,
            43299353513533551894186139189640417258433143999370443772555398876445798892777,
            4294967295
        );

        _setUpTimestampAndActor(block.timestamp + 236027 + 419861, USER1);
        this.borrowTo(
            115792089237316195423570985008687907853269984665640564039457584007913129639933,
            12679160512295910505134524200668209442888434120768545302994985489236337400461,
            110622404646957170741979884429158225310959902106993115290285157431178281462317
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();

        _setUpTimestampAndActor(block.timestamp + 519847 + 537688, USER1);
        this.mintToActor(
            1524785991, 94770901425382707645982434801208986081893116647861686451217818710293849056692, 2495578189
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();

        _setUpTimestampAndActor(block.timestamp + 482914, USER1);
        this.pullDebt(
            115792089237316195423570985008687907853269984665640564039457584007913129639930,
            6531774282870008395670377842959747891557266514980951417067242944360095099411,
            1564406459415799172898330
        );

        echidna_invariant_VaultSimpleBorrowable_invariantAB();

        _setUpTimestampAndActor(block.timestamp + 325359, USER1);
        this.disableController(109590050855132395193547060399598738730679977601774708619272268965138753376521);

        _setUpTimestampAndActor(block.timestamp + 350070, USER2);
        this.setBorrowCap(110216325551435478160438372316229115063607853874091438833657319383429084445967, 149);

        _setUpTimestampAndActor(block.timestamp + 38059, USER2);
        this.disableCollateral(11608936110889483328924818573616368211107254603491700205727981958565312158824, 995);

        _setUpTimestampAndActor(block.timestamp + 311539, USER1);
        this.disableCollateral(
            16156842317565293874272834530371880720966471053262404558597773956279093428223,
            100493319074610262040629111243543395895843514107432533086161102923386496457182
        );

        _setUpTimestampAndActor(block.timestamp + 519847, USER1);
        this.enableCollateral(
            58763369478890212134538580855076743927036989342241379362500560758417647827485,
            20501314626389661569539759282732492334705586976301171833563712236224178131551
        );

        _setUpTimestampAndActor(block.timestamp + 499804, USER1);
        this.mint(
            1695024648156951019808627303400112514851726106141251,
            address(0),
            67684336012151363931415626370408570264818677174237722096940949297581557117354
        );

        _setUpTimestampAndActor(block.timestamp + 372377, USER2);
        this.approveTo(
            0,
            115754477555338170954245134728382081014515253725470521188593404063622758786140,
            115792089237316195423570985008687907853269984665635564039457584007913129639935
        );

        _setUpTimestampAndActor(block.timestamp + 583581, USER2);
        this.enableCollateral(478, 5318912439207034739885087447242316354);

        _setUpTimestampAndActor(block.timestamp + 290780, USER1);
        this.approveTo(
            36,
            99635246919750901549298150478316027132303513612378159480859810051634036211712,
            32550744143136045529702861637878048568153605992259719136
        );

        _setUpTimestampAndActor(block.timestamp + 352543, USER1);
        this.disableController(101);

        _setUpTimestampAndActor(block.timestamp + 289607, USER1);
        this.setAccountOperator(
            11516053223275709395408191732293294461887652883742857219859026575491494794307,
            23948141631302998739422445039489121684887947944813059340784139873751617409259,
            false
        );

        _setUpTimestampAndActor(block.timestamp + 33361136, USER1);
        this.enableController(
            12759405680323048689114877319407988437412221457213781195479409487177867114510,
            2936906420797400932574689231204431074772854713696823380517384429523889475632
        );
        echidna_invariant_VaultSimpleBorrowable_invariantAB();
    }

    function test_disableControllerEVC() public {
        _setUpBlockAndActor(41042, USER2);
        this.disableControllerEVC(10709246616502725659467506005679776718551158952008047283088709786807569473950);
    }

    function test_disableControllerEVC2() public {
        _setUpBlockAndActor(23878, USER2);
        this.enableController(
            77472102764689050402378783894995354064998398760128963999802111240406467630227,
            13643531396961746712283185656709236708675306836998809720103771604973879420174
        );
        _setUpBlockAndActor(47698, USER3);
        this.disableControllerEVC(516928969809447300998084754503071017202098145828752518033292785749612185892);
    } */

    function _setUpBlockAndActor(uint256 _block, address _user) internal {
        vm.roll(_block);
        actor = actors[_user];
    }

    function _setUpTimestampAndActor(uint256 _timestamp, address _user) internal {
        vm.warp(_timestamp);
        actor = actors[_user];
    }
}
